/*Unity Quickstart Library (qsLib)http://www.andreivictor.net/uqsl/Last Updated: 09/06/2015Copyright 2015 Andrei O. VictorLicensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.*/using UnityEngine;using System.Collections.Generic;using QsLib;namespace QsLib{	/// <summary>	/// Spawner abstract class defines the behavior of a usual spawner using object pools.	/// It provides an API to spawn and unspawn preallocated gameobjects made from the	/// specified prefab and managing their existence in the background. This is very handy	/// for performance gains!	/// Usage:	/// 1) Create a new spawner class that inherits this class and override the virtual	/// methods if needed.	/// 2) Instantiate the new spawner class and initialize via the Initialize method.	/// 3) Use spawn and unspawn methods accordingly.	/// </summary>	public abstract class Spawner	{        // A helper static class to add a SpawnableObject component to the gameobject. It        // returns the instance of the SpawnableObject it finds/creates.        public static SpawnableObject AddSpawnableObjectComponent( GameObject go )        {            if( go == null )            {                return null;            }            SpawnableObject spawnable = go.GetComponent< SpawnableObject >() as SpawnableObject;            if( spawnable != null )            {                return spawnable;            }            spawnable = go.AddComponent< SpawnableObject >();            return spawnable;        }		// Take an object from the pool and make it appear and active on the specified		// position.		public virtual GameObject Spawn( Vector3 position )		{			GameObject go = m_pool.GetReadyObject();			if( go != null )			{				go.transform.position = position;				go.SetActive(true);			}						return go;		}		// Return a claimed object back to the pool and making it inactive.		public virtual void Unspawn( GameObject go )		{			if ( go != null )			{				go.SetActive(false);				go.transform.position = Vector3.zero;				m_pool.ReturnObject(go);			}		}        // Return all claimed objects back to the pool and making it inactive.        public void UnspawnAll()        {            foreach( ObjectPool< GameObject >.PoolItem< GameObject > item in m_pool.PoolObjects )            {                if( item.m_object != null && item.m_state == ObjectPool<GameObject>.ItemLife.Claimed )                {                    Unspawn( item.m_object );                }            }        }		// Initialize the object pool given the prefab.		public virtual bool Initialize( int maxPoolItems, GameObject prefab )		{			if( prefab == null )			{				Debug.LogError( "Prefab for Spawner not provided. Invalid Pool!" );				return false;			}						m_prefab = prefab;			m_maxObjects = maxPoolItems;			m_pool = new ObjectPool< GameObject >( m_maxObjects,			                                      CreateObject, DestroyObject );			if( m_pool == null )			{				Debug.LogError( "The object pool is still null after Start()!" );				return false;			}						return true;		}        // Return the number of available objects in the spawner's pool.        public int GetAvailableObjectsCount()        {            return m_pool != null ? m_pool.GetReadyObjectsInPoolSize() : 0;        }				protected GameObject CreateObject()		{			GameObject go = null;						if (m_prefab != null)			{				go = GameObject.Instantiate(m_prefab) as GameObject;				if (go != null)				{					go.SetActive(false);				}			}						return go;		}				protected void DestroyObject( GameObject go )		{			if (go != null)			{				GameObject.Destroy(go);			}		}				protected int m_maxObjects					= 0;		protected GameObject m_prefab				= null;		protected ObjectPool< GameObject > m_pool	= null;	}		/// <summary>	/// A component class to put into GameObjects using a Spawner. This is to store the spawner	/// who spawned the gameobject so the gameobject can be properly unspawned.	/// </summary>    public class SpawnableObject : MonoBehaviour    {    	// Accessor to the spawner who spawned this SpawnableObject.        public Spawner spawner        {            get            {                return m_mySpawner;            }            set            {                m_mySpawner = value;            }        }        protected Spawner m_mySpawner   = null;    }}