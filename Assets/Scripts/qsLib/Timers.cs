/*Unity Quickstart Library (qsLib)http://www.andreivictor.net/uqsl/Last Updated: 09/04/2015Copyright 2015 Andrei O. VictorLicensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.*/using UnityEngine;using System.Collections.Generic;/// <summary>/// Timers - a manager of timers to have an app-wide coverage of timers of different context. By default,/// the following are the available timers:/// a. Game Timer - time since game started. Ideally, you should use this instead of Time.time/// b. World Timer - time since world/level started (must call start manually)./// c. Effects Timer - separate time for the purpose of sounds, and animations of gui etc.////// Optionally, a custom Timer object can be requested and its lifetime is retained even across scenes/// unless explicitly destroyed.////// Caution: A potential bug is out of precision int or floating point numbers!////// Usage: (for custom timers)/// 1. Timer myTimer = CreateTimer( "RouletteTimer" ); // or GetTimer( "RouletteTimer" ) if previously///    created./// 2. Use myTimer (myTimer.GetTime(), etc)./// 3. DestroyTimer( "RouletteTimer" ); // when no longer needed./// </summary>public class Timers : Singleton< Timers >{	// Accessor to the Game Timer.	public Timer Game	{		get { return m_timerGame; }	}	// Accessor to the World Timer.	public Timer World	{		get { return m_timerWorld; }	}	// Acessor to the Effects Timer.	public Timer Effects	{		get { return m_timerEffects; }	}	// Create a custom timer using the id. If the id already exists, it returns the timer	// of that id.	public Timer CreateTimer( string id )	{		Timer timer = GetTimer( id );		if( timer == null )		{			timer = new Timer();			m_timers.Add( id, timer );		}		return timer;	}	// Retrieve the timer of the specified id. If it doesn't exist, it returns null.	public Timer GetTimer( string id )	{		Timer timer = null;		m_timers.TryGetValue( id, out timer );		return timer;	}	// Destroy the timer of the specified id if it exists.	public void DestroyTimer( string id )	{		m_timers.Remove( id );	}		protected void Start()	{		// only Game timer starts		m_timerGame.Start();		m_timerEffects.Start();	}	protected void Update()	{		float dt = Time.deltaTime;		// default timers		m_timerGame.Update( dt );		m_timerWorld.Update( dt );		m_timerEffects.Update( dt );		// custom timers		foreach( KeyValuePair< string, Timer > entry in m_timers )		{			entry.Value.Update( dt );		}	}    protected void FixedUpdate()    {        float fdt = Time.fixedDeltaTime;                // default timers        m_timerGame.FixedUpdate( fdt );        m_timerWorld.FixedUpdate( fdt );        m_timerEffects.FixedUpdate( fdt );                // custom timers        foreach( KeyValuePair< string, Timer > entry in m_timers )        {            entry.Value.FixedUpdate( fdt );        }    }	protected Timers() {} // Singleton		private Timer m_timerGame                       = new Timer();	private Timer m_timerWorld                      = new Timer();	private Timer m_timerEffects                    = new Timer();	private Dictionary< string, Timer > m_timers    = new Dictionary< string, Timer >();}/// <summary>/// A generic Unity timer object class that references the Unity timer but has a/// separated "thread" of time to manipulate. The timer supports basic getting the time/// and delta time and starting, pausing, and time scales. Think stopwatch.////// Notes:/// 1. There is really no additional thread but it provides a different time reference///    relative to the System timer (Time.time)./// 2. If you change Unity's timescale setting it will affect all timers.////// Usage:/// 1. Instantiate/// 2. Start()/// 3. Use other available functions./// </summary>public class Timer{	// Retrieve the current time of the Timer.	public float GetTime()	{		return m_time;	}		// Retrieve the last delta time of this timer.	public float GetDeltaTime()	{		return m_deltaTime;	}		// Retrieve the last fixed delta time of this timer.	public float GetFixedDeltaTime()	{		return m_fixedDeltaTime;	}		// Get the time scale set for this timer.	public float GetTimeScale()	{		return m_timeScale;	}		// Set the time scale for this timer.	public void SetTimeScale( float timeScale = 1.0f )	{		m_timeScale = timeScale;	}		// Make the timer run and count the time.	public void Start()	{		m_started = true;	}		// Make the timer pause the count. It can be resumed later by calling Start().	public void Pause()	{		m_started = false;	}		// Make the timer restart its counting.	public void Reset()	{		m_time = 0.0f;		m_deltaTime = 0.0f;		m_fixedDeltaTime = 0.0f;	}		// LerpTimeScale will nicely gradually move the value towards the target value at	// a certain speed. Note that speed is based on the Engine time.	public void LerpTimeScale( float to, float speed = 1.0f )	{		LerpFromToTimeScale( m_timeScale, to, speed );	}		// LerpTimeScale will nicely gradually move the value from the specified value	// towards the target value at	// a certain speed. Note that speed is based on the Engine time.	public void LerpFromToTimeScale( float from, float to, float speed = 1.0f )	{		m_timeScale = from;		m_targetTimeScale = to;		m_isIncreasing = m_targetTimeScale - m_timeScale >= 0.0f;		m_lerpRate = speed;		m_lerping = true;	}		// Constructor defaulting all timer values to 0.	public Timer() 	{		m_time = 0.0f;		m_deltaTime = 0.0f;		m_fixedDeltaTime = 0.0f;	}		// Advance a the timer per frame. This should not be called by the user.	public void Update( float dt )	{		if( !m_started )		{			m_deltaTime = 0.0f;			return;		}				if( m_lerping )		{			m_timeScale += ( m_isIncreasing ? m_lerpRate : -m_lerpRate ) * dt;			if( m_isIncreasing ? m_timeScale >= m_targetTimeScale : m_timeScale <= m_targetTimeScale )			{				m_timeScale = m_targetTimeScale;				m_lerping = false;			}		}				m_deltaTime = dt * m_timeScale;		m_time += m_deltaTime;	}		// Advance a the timer per frame. This should not be called by the user.	public void FixedUpdate( float dft )	{		if( !m_started )		{			m_fixedDeltaTime = 0.0f;			return;		}				m_fixedDeltaTime = dft * m_timeScale;	}		private float m_time            = 0.0f;	private float m_deltaTime       = 0.0f;	private float m_fixedDeltaTime  = 0.0f;	private float m_timeScale       = 1.0f;	private float m_targetTimeScale = 1.0f;	private float m_lerpRate        = 1.0f;	private bool m_started          = false;	private bool m_lerping          = false;	private bool m_isIncreasing     = true;}/// <summary>/// MultipleTimeMonoBehaviour - this abstract class is a special monobehaviour with an extended/// feature to change the time script uses instead of the traditional Time provided by unity./// Usage:/// 1. Create a class (intended as Unity component) which extends this class./// 2. You can optionally set the Timer object./// </summary>public abstract class MultipleTimeMonoBehaviour : MonoBehaviour{    // Get the current time of the currently associated timer.    public float GetTime()    {        if( m_timer != null )        {            m_timer.GetTime();        }                return Time.time;    }        // Get the delta time of the currently associated timer.    public float GetDeltaTime()    {        if( m_timer != null )        {            m_timer.GetDeltaTime();        }                return Time.deltaTime;    }    // Get the fixed delta time of the currently associated timer.    public float GetFixedDeltaTime()    {        if( m_timer != null )        {            m_timer.GetFixedDeltaTime();        }                return Time.fixedDeltaTime;    }        // Get/Set the time scale for the currently associated timer.    public float timeScale    {        get        {            if( m_timer != null )            {                m_timer.GetTimeScale();            }                        return Time.timeScale;        }                set        {            if( m_timer != null )            {                m_timer.SetTimeScale( value );            }                        Time.timeScale = value;        }    }        // Retrieve or set the Timer object this monobehaviour will use or is using.    public Timer timer    {        get{ return m_timer; }        set{ m_timer = value; }    }        protected void Start()    {        if( Timers.Instance != null )        {            m_timer = Timers.Instance.Game;        }    }        private Timer m_timer = null;}